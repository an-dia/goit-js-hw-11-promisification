{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js","webpack:///./index.js"],"names":["delay","ms","time","Promise","resolve","setTimeout","logger","console","log","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","then","updatedLogger","amount","catch"],"mappings":"0HAAaA,EAAQ,SAAAC,GACnB,IAAIC,EAAOD,EAMX,OALgB,IAAIE,SAAQ,SAACC,GAC3BC,YAAW,WACXD,EAAQF,KACNA,OAMOI,EAAS,SAAAJ,GAAI,OAAIK,QAAQC,IAAR,kBAA8BN,EAA9B,OCXjBO,G,8BAAQ,CACnB,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,KAGZC,EAAkB,SAACC,EAAUC,GAQxC,OAPgB,IAAIX,SAAQ,SAACC,EAASW,GACnCX,EACIS,EAASG,KAAI,SAAAC,GAAI,OACnBA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,UAOvDX,EAAS,SAAAY,GAAY,OAAIX,QAAQY,MAAMD,ICdvCE,EAAkB,SAACC,GAC9B,IALwCC,EAAKC,EAKvCvB,GALkCsB,EAKA,IALKC,EAKA,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAkBpD,OAZgB,IAAInB,SAAQ,SAACC,EAASW,GACpCV,YAAW,WACQmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAAEuB,GAAIN,EAAYM,GAAIzB,KAAMF,IAEpCe,EAAOM,EAAYM,MAEpB3B,OAMQ4B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIzB,EAAU,EAAVA,KAC9BK,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CzB,EAA9C,OAGW2B,EAAW,SAAAF,GACtBpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BCtBF3B,EAAM,KAAM+B,KAAKzB,GACjBN,EAAM,KAAM+B,KAAKzB,GACjBN,EAAM,MAAM+B,KAAKzB,GAKjBM,EAAgBH,EAAO,SAASsB,KAAKC,GACrCpB,EAAgBH,EAAO,OAAOsB,KAAKC,GAKnCZ,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAC/BF,KAAKH,GACLM,MAAML,GAETT,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAC/BF,KAAKH,GACLM,MAAML,GAETT,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,KAC/BF,KAAKH,GACLM,MAAML,GAETT,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAC/BF,KAAKH,GACLM,MAAML,K","file":"main.5be9716f16c7d344beba.js","sourcesContent":["export const delay = ms => {\r\n  let time = ms;\r\n  const promise = new Promise((resolve) => {\r\n    setTimeout(() => {\r\n    resolve(time) \r\n   }, time) \r\n  })\r\n  return promise\r\n};\r\n\r\n\r\nexport const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n\r\n","export const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nexport const toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n     resolve(\r\n         allUsers.map(user =>\r\n       user.name === userName ? { ...user, active: !user.active } : user,)\r\n       )\r\n    const updatedUsers = resolve;\r\n});\r\n  return promise\r\n};\r\n\r\nexport const logger = updatedUsers => console.table(updatedUsers);\r\n","export const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport const makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      resolve({ id: transaction.id, time: delay });\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n   });\r\n\r\n  return promise\r\n};\r\n\r\nexport const logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nexport const logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};","import { delay, logger } from './js/task-1';\nimport { users, toggleUserState, logger as updatedLogger } from './js/task-2';\nimport { makeTransaction, logSuccess, logError} from './js/task-3'\n\n// Task-1\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// ================================================================\n\n// Task-2\ntoggleUserState(users, 'Mango').then(updatedLogger);\ntoggleUserState(users, 'Lux').then(updatedLogger);\n\n// ================================================================\n\n// Task-3\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}